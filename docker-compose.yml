services:
  postgres:
    image: postgres:16
    container_name: clm_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrator:
    image: golang:1.23-alpine # Используем образ с Go для sql-migrate
    container_name: clm_migrator
    working_dir: /app
    volumes:
      - /Users/dpetrakov/projects/card-limit-manager-workshop:/app # Монтируем текущую директорию в /app в контейнере. Changed from absolute path.
    command: ["sh", "/app/run_migrations.sh"]
    depends_on:
      postgres:
        condition: service_healthy # Запускать только после того, как postgres станет healthy
    environment:
      GOCACHE: "/go/cache"
      GOMODCACHE: "/go/pkg/mod"
      PATH: "/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  clm-service:
    build:
      context: ./services/clm
      dockerfile: Dockerfile
    container_name: clm_service
    ports:
      - "8080:8080" # This port is for direct access, the proxy will use the internal network
    depends_on:
      postgres:
        condition: service_healthy
      migrator: # Ensure migrations run before clm-service starts
        condition: service_completed_successfully
    environment:
      GIN_MODE: "release"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: clm_frontend
    # No ports exposed externally, access is via nginx-proxy
    # For development/debugging, you could expose a port:
    # ports:
    #   - "8081:80"
    depends_on:
      - clm-service # Ensures backend is available, though not strictly necessary for build

  nginx-proxy:
    image: nginx:alpine
    container_name: clm_nginx_proxy
    ports:
      - "80:80" # Main entry point for the application
    volumes:
      - /Users/dpetrakov/projects/card-limit-manager-workshop/nginx-proxy-conf/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_started # Or service_healthy if frontend had a healthcheck
      clm-service:
        condition: service_started # Or service_healthy if clm-service had a healthcheck
    # healthcheck: # Optional: check if nginx is running
    #   test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost/healthz || exit 1"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3

volumes:
  postgres_data:
