server {
    listen 80;
    server_name localhost;

    # Frontend: Serve React App
    location / {
        proxy_pass http://frontend:80; # 'frontend' is the service name in docker-compose, port 80 is where its nginx listens
        try_files $uri $uri/ /index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Backend: CLM Service API
    # CLM.json specifies servers: [{ "url": "/api/v1" }]
    # This means the clm-service expects requests to start with /api/v1
    # So, if a request comes to the proxy as /api/v1/some/endpoint,
    # it should be forwarded to http://clm-service:8080/api/v1/some/endpoint
    location /api/v1/ {
        proxy_pass http://clm-service:8080; # 'clm-service' is the service name, port 8080 is from existing docker-compose
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # The path /api/v1/ is passed as is.
        # If clm-service expects /api/v1 at its root, then it's fine.
        # If clm-service does NOT expect /api/v1/ at its root, and instead just /some/endpoint,
        # we would need to rewrite:
        # rewrite ^/api/v1/(.*)$ /$1 break;
        # proxy_pass http://clm-service:8080;
        # For now, assuming clm-service handles /api/v1/
    }

    # Optional: Add a health check endpoint for the proxy itself
    location /healthz {
        return 200 "OK";
        access_log off;
    }
}
